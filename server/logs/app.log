2025-07-26 14:08:39 | INFO | /app/app/graphql/analytics/aggregator.py:51 - lifespan() | Trigger queue started
2025-07-26 14:11:03 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 14:11:03 | INFO | /app/app/graphql/analytics/aggregator.py:57 - lifespan() | Trigger queue stopped
2025-07-26 14:11:04 | INFO | /app/app/graphql/analytics/aggregator.py:51 - lifespan() | Trigger queue started
2025-07-26 14:11:46 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 14:11:46 | INFO | /app/app/graphql/analytics/aggregator.py:57 - lifespan() | Trigger queue stopped
2025-07-26 14:11:47 | INFO | /app/app/graphql/analytics/aggregator.py:51 - lifespan() | Trigger queue started
2025-07-26 14:12:17 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 2, room 101, meal type High-Tea, timestamp None, rating None
2025-07-26 14:17:56 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 14:17:56 | INFO | /app/app/graphql/analytics/aggregator.py:57 - lifespan() | Trigger queue stopped
2025-07-26 14:17:56 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 14:17:57 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 14:17:57 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 14:17:57 | INFO | /app/app/graphql/analytics/aggregator.py:51 - lifespan() | Trigger queue started
2025-07-26 14:29:55 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 14:29:55 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 14:29:55 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 14:29:55 | INFO | /app/app/graphql/analytics/aggregator.py:57 - lifespan() | Trigger queue stopped
2025-07-26 14:29:55 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 14:29:55 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 14:29:55 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 14:29:55 | INFO | /app/app/graphql/analytics/aggregator.py:54 - lifespan() | Trigger queue started
2025-07-26 14:30:15 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 1, room 101, meal type High-Tea, timestamp None, rating None
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '1', 'room_number': 101, 'meal_type': 'High-Tea'} and fetch type: none
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-26 14:30:15 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh'}
2025-07-26 14:30:15 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh'}
2025-07-26 14:30:15 | DEBUG | /app/app/graphql/analytics/aggregator.py:17 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh'}
2025-07-26 14:30:15 | DEBUG | /app/app/graphql/analytics/aggregator.py:20 - task_1() | Task 1 started
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 14:30:15 | DEBUG | /app/app/graphql/analytics/aggregator.py:26 - task_2() | Task 2 started
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 14:30:15 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_3() | Task 3 started
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 14:30:15 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 14:30:15 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task 1 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_1: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_1
2025-07-26 14:30:15 | DEBUG | /app/app/graphql/analytics/aggregator.py:28 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2
2025-07-26 14:30:15 | DEBUG | /app/app/graphql/analytics/aggregator.py:34 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 14:30:15 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3
2025-07-26 14:30:15 | DEBUG | /app/app/graphql/analytics/aggregator.py:42 - handle_trigger() | All tasks completed successfully
2025-07-26 14:48:55 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 14:48:55 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 14:48:55 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 14:48:55 | INFO | /app/app/graphql/analytics/aggregator.py:60 - lifespan() | Trigger queue stopped
2025-07-26 14:48:56 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 14:51:24 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 14:55:33 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 15:06:58 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 15:06:58 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 15:06:58 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 15:06:58 | INFO | /app/app/graphql/analytics/aggregator.py:54 - lifespan() | Trigger queue started
2025-07-26 15:13:41 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 15:13:41 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 15:13:41 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 15:13:41 | INFO | /app/app/graphql/analytics/aggregator.py:60 - lifespan() | Trigger queue stopped
2025-07-26 15:13:42 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 15:13:42 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 15:13:42 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 15:13:42 | INFO | /app/app/graphql/analytics/aggregator.py:54 - lifespan() | Trigger queue started
2025-07-26 15:20:03 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 15:20:03 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 15:20:03 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 15:20:03 | INFO | /app/app/graphql/analytics/aggregator.py:60 - lifespan() | Trigger queue stopped
2025-07-26 15:20:47 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 15:20:47 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 15:20:47 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 15:20:47 | INFO | /app/app/graphql/analytics/aggregator.py:54 - lifespan() | Trigger queue started
2025-07-26 15:20:59 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:20:59 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: task_1_Dinner
2025-07-26 15:20:59 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 15:21:38 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 1, room 101, meal type Dinner, timestamp None, rating None
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '1', 'room_number': 101, 'meal_type': 'Dinner'} and fetch type: none
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-26 15:21:38 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 15:21:38 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 15:21:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:17 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 15:21:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:20 - task_1() | Task 1 started
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 15:21:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:26 - task_2() | Task 2 started
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 15:21:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_3() | Task 3 started
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 15:21:38 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 15:21:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task 1 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_1_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': [<Queue at 0xffffa1717d70 maxsize=100 _getters[1]>]})
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic task_1_Dinner
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic task_1_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:38 | DEBUG | /app/app/graphql/analytics/subscriptions.py:56 - task_1_listener() | Received message for task 1: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:28 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': [<Queue at 0xffffa1717d70 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Dinner
2025-07-26 15:21:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:34 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': [<Queue at 0xffffa1717d70 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 15:21:38 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Dinner
2025-07-26 15:21:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:42 - handle_trigger() | All tasks completed successfully
2025-07-26 15:21:58 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 2, room 101, meal type Dinner, timestamp None, rating None
2025-07-26 15:21:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '2', 'room_number': 101, 'meal_type': 'Dinner'} and fetch type: none
2025-07-26 15:21:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 15:21:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 15:21:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 15:21:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:17 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 15:21:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:20 - task_1() | Task 1 started
2025-07-26 15:21:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 15:21:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 15:21:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:26 - task_2() | Task 2 started
2025-07-26 15:21:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 15:21:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 15:21:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_3() | Task 3 started
2025-07-26 15:21:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 15:21:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 15:21:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:34 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': [<Queue at 0xffffa1717d70 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Dinner
2025-07-26 15:21:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:28 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': [<Queue at 0xffffa1717d70 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Dinner
2025-07-26 15:21:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task 1 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_1_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': [<Queue at 0xffffa1717d70 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic task_1_Dinner
2025-07-26 15:21:58 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic task_1_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:58 | DEBUG | /app/app/graphql/analytics/subscriptions.py:56 - task_1_listener() | Received message for task 1: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:21:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:42 - handle_trigger() | All tasks completed successfully
2025-07-26 15:22:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:22:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': [<Queue at 0xffffa1717d70 maxsize=100 tasks=2>]})
2025-07-26 15:22:09 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: task_1_Dinner
2025-07-26 15:22:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': [<Queue at 0xffffa1717d70 maxsize=100 tasks=2>]})
2025-07-26 15:22:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': []})
2025-07-26 15:22:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_1_Dinner': []})
2025-07-26 15:22:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:22:12 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: task_3_Breakfast
2025-07-26 15:22:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 15:22:19 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 2, room 101, meal type Breakfast, timestamp None, rating None
2025-07-26 15:22:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '2', 'room_number': 101, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-26 15:22:19 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 15:22:19 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-26 15:22:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-26 15:22:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:17 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-26 15:22:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:20 - task_1() | Task 1 started
2025-07-26 15:22:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 15:22:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 15:22:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:26 - task_2() | Task 2 started
2025-07-26 15:22:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 15:22:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 15:22:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_3() | Task 3 started
2025-07-26 15:22:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 15:22:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 15:22:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:34 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Breakfast: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_3_Breakfast': [<Queue at 0xffffa03ac830 maxsize=100 _getters[1]>]})
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic task_3_Breakfast
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic task_3_Breakfast: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:22:19 | DEBUG | /app/app/graphql/analytics/subscriptions.py:74 - task_3_listener() | Received message for task 3: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:22:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:28 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Breakfast: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_3_Breakfast': [<Queue at 0xffffa03ac830 maxsize=100 tasks=1>]})
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Breakfast
2025-07-26 15:22:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task 1 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_1_Breakfast: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_3_Breakfast': [<Queue at 0xffffa03ac830 maxsize=100 tasks=1>]})
2025-07-26 15:22:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_1_Breakfast
2025-07-26 15:22:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:42 - handle_trigger() | All tasks completed successfully
2025-07-26 15:24:42 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 15:24:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_3_Breakfast': [<Queue at 0xffffa03ac830 maxsize=100 tasks=1>]})
2025-07-26 15:24:42 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: task_3_Breakfast
2025-07-26 15:24:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_3_Breakfast': [<Queue at 0xffffa03ac830 maxsize=100 tasks=1>]})
2025-07-26 15:24:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_3_Breakfast': []})
2025-07-26 15:24:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'task_3_Breakfast': []})
2025-07-26 16:35:46 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 16:35:46 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 16:35:46 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 16:35:46 | INFO | /app/app/graphql/analytics/aggregator.py:60 - lifespan() | Trigger queue stopped
2025-07-26 16:35:47 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 16:35:47 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 16:35:47 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 16:35:47 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-26 16:38:31 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-26 16:38:31 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM analytics.meal_activity_fact
     with params: None and fetch type: all
2025-07-26 16:38:31 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:38:31 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-26 16:38:40 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM analytics.meal_activity_fact
     with params: None and fetch type: all
2025-07-26 16:38:40 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:40:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 16:40:55 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:41:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM analytics.meal_activity_fact
     with params: None and fetch type: all
2025-07-26 16:41:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:43:38 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 1, room 101, meal type Dinner, timestamp None, rating None
2025-07-26 16:43:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '1', 'room_number': 101, 'meal_type': 'Dinner'} and fetch type: none
2025-07-26 16:43:38 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 16:43:38 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 16:43:38 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 16:43:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 16:43:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-26 16:43:38 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: get_mealpending_data() missing 1 required positional argument: 'meal_type'
2025-07-26 16:43:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-26 16:43:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 16:43:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 16:43:38 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:43:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 16:43:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 16:43:38 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:43:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Dinner
2025-07-26 16:43:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 16:43:38 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Dinner
2025-07-26 16:43:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 16:44:22 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM analytics.meal_activity_fact
     with params: None and fetch type: all
2025-07-26 16:44:22 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:47:05 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 16:47:05 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:47:56 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 16:47:56 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 16:47:56 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 16:47:56 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-26 16:47:57 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 16:47:57 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 16:47:57 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 16:47:57 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-26 16:50:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:50:47 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 16:50:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 16:50:54 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 3, room 101, meal type Lunch, timestamp None, rating None
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '3', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-26 16:50:54 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 16:50:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 16:50:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 16:50:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        SELECT
            status
            , COUNT(tenant_id) AS value_counts
        FROM combined
        GROUP BY status
     with params: {'meal_type': 'Lunch', 'date': 'CURRENT_DATE'} and fetch type: all
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:50:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:50:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 16:50:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:50:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-26 16:50:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff9e01deb0 maxsize=100 _getters[1]>]})
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic slh_mealpending_piechart_Lunch: []
2025-07-26 16:50:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff9e01deb0 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Lunch
2025-07-26 16:50:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff9e01deb0 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 16:50:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Lunch
2025-07-26 16:50:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 16:54:25 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:54:25 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff9e01deb0 maxsize=100 tasks=1>]})
2025-07-26 16:54:25 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 16:54:25 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff9e01deb0 maxsize=100 tasks=1>]})
2025-07-26 16:54:25 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 16:54:25 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 16:54:25 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 16:54:25 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 16:54:25 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 16:54:25 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-26 16:54:26 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 16:54:26 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 16:54:26 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 16:54:26 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-26 16:54:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:54:27 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 16:54:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 16:54:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:54:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffab8d7b30 maxsize=100>]})
2025-07-26 16:54:57 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 16:54:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffab8d7b30 maxsize=100>]})
2025-07-26 16:54:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 16:54:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 16:55:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:55:03 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 16:55:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 16:55:28 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 4, room 101, meal type Lunch, timestamp None, rating None
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '4', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-26 16:55:28 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 16:55:28 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 16:55:28 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 16:55:28 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        SELECT
            status
            , COUNT(tenant_id) AS value_counts
        FROM combined
        GROUP BY status
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:55:28 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:55:28 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 16:55:28 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 16:55:28 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: [{'x': 'served', 'y': 2}]
2025-07-26 16:55:28 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:55:28 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: [{'x': 'served', 'y': 2}]
2025-07-26 16:55:28 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffab91fe00 maxsize=100 _getters[1]>]})
2025-07-26 16:55:28 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-26 16:55:28 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic slh_mealpending_piechart_Lunch: [{'x': 'served', 'y': 2}]
2025-07-26 16:55:29 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:55:29 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:55:29 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:55:29 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffab91fe00 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 16:55:29 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Lunch
2025-07-26 16:55:29 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:55:29 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 16:55:29 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 16:55:29 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffab91fe00 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 16:55:29 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Lunch
2025-07-26 16:55:29 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:02:07 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:02:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffab91fe00 maxsize=100 tasks=1>]})
2025-07-26 17:02:07 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 17:02:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffab91fe00 maxsize=100 tasks=1>]})
2025-07-26 17:02:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:02:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:02:07 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 17:02:07 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 17:02:07 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 17:02:07 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-26 17:02:08 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 17:02:08 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 17:02:08 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 17:02:08 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-26 17:02:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:02:10 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 17:02:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 17:02:15 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:02:15 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb4ecfc50 maxsize=100>]})
2025-07-26 17:02:15 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 17:02:15 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb4ecfc50 maxsize=100>]})
2025-07-26 17:02:15 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:02:15 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:03:20 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:03:20 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 17:03:20 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 17:03:30 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 5, room 101, meal type Lunch, timestamp None, rating None
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '5', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-26 17:03:30 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:03:30 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:03:30 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:03:30 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:03:30 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:03:30 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:03:30 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:03:30 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-26 17:03:30 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb4f1d6d0 maxsize=100 _getters[1]>]})
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic slh_mealpending_piechart_Lunch: []
2025-07-26 17:03:30 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb4f1d6d0 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Lunch
2025-07-26 17:03:30 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb4f1d6d0 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:03:30 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Lunch
2025-07-26 17:03:30 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:06:29 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:06:29 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb4f1d6d0 maxsize=100 tasks=1>]})
2025-07-26 17:06:29 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 17:06:29 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb4f1d6d0 maxsize=100 tasks=1>]})
2025-07-26 17:06:29 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:06:29 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:06:30 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 17:06:30 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 17:06:30 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 17:06:30 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-26 17:06:30 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 17:06:30 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 17:06:30 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 17:06:30 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-26 17:06:32 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:06:32 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 17:06:32 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 17:06:48 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:06:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb57b42f0 maxsize=100>]})
2025-07-26 17:06:48 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 17:06:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb57b42f0 maxsize=100>]})
2025-07-26 17:06:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:06:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:06:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:06:58 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 17:06:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 17:07:09 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 6, room 101, meal type Lunch, timestamp None, rating None
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '6', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-26 17:07:09 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:07:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:07:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:07:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:07:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:07:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:07:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:07:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-26 17:07:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb5cb0200 maxsize=100 _getters[1]>]})
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic slh_mealpending_piechart_Lunch: []
2025-07-26 17:07:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb5cb0200 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Lunch
2025-07-26 17:07:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb5cb0200 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:07:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Lunch
2025-07-26 17:07:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:08:26 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:08:26 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb5cb0200 maxsize=100 tasks=1>]})
2025-07-26 17:08:26 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 17:08:26 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb5cb0200 maxsize=100 tasks=1>]})
2025-07-26 17:08:26 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:08:26 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:08:27 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 17:08:27 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 17:08:27 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 17:08:27 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-26 17:08:27 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 17:08:28 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 17:08:28 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 17:08:28 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-26 17:08:29 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:08:29 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 17:08:29 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 17:08:42 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:08:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff842d3fe0 maxsize=100>]})
2025-07-26 17:08:42 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 17:08:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff842d3fe0 maxsize=100>]})
2025-07-26 17:08:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:08:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:08:49 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:08:49 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 17:08:49 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 17:09:03 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 7, room 101, meal type Lunch, timestamp None, rating None
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '7', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-26 17:09:03 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:09:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:09:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:09:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:09:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff842d3e60 maxsize=100 _getters[1]>]})
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic slh_mealpending_piechart_Lunch: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:09:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff842d3e60 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Lunch
2025-07-26 17:09:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff842d3e60 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:09:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Lunch
2025-07-26 17:09:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:09:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff842d3e60 maxsize=100 tasks=1>]})
2025-07-26 17:09:09 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 17:09:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffff842d3e60 maxsize=100 tasks=1>]})
2025-07-26 17:09:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:09:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:09:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:11 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Dinner
2025-07-26 17:09:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 17:09:19 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 9, room 101, meal type Lunch, timestamp None, rating None
2025-07-26 17:09:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '9', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-26 17:09:19 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 17:09:19 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:09:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:09:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:09:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-26 17:09:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 17:09:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 17:09:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:09:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 17:09:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:09:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 _getters[1]>]})
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Lunch
2025-07-26 17:09:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 _getters[1]>]})
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Lunch
2025-07-26 17:09:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 _getters[1]>]})
2025-07-26 17:09:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-26 17:09:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:09:39 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 11, room 101, meal type Dinner, timestamp None, rating None
2025-07-26 17:09:39 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '11', 'room_number': 101, 'meal_type': 'Dinner'} and fetch type: none
2025-07-26 17:09:39 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 17:09:39 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 17:09:39 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 17:09:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 17:09:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-26 17:09:39 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 17:09:39 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 17:09:39 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:09:39 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 17:09:39 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:09:39 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 _getters[1]>]})
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Dinner
2025-07-26 17:09:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 _getters[1]>]})
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Dinner
2025-07-26 17:09:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: [{'x': 'served', 'y': 0}, {'x': 'pending', 'y': 2}]
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: [{'x': 'served', 'y': 0}, {'x': 'pending', 'y': 2}]
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 _getters[1]>]})
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-26 17:09:39 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic slh_mealpending_piechart_Dinner: [{'x': 'served', 'y': 0}, {'x': 'pending', 'y': 2}]
2025-07-26 17:09:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:09:43 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 11, room 101, meal type Dinner, timestamp None, rating None
2025-07-26 17:09:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '11', 'room_number': 101, 'meal_type': 'Dinner'} and fetch type: none
2025-07-26 17:09:43 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 17:09:43 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 17:09:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 17:09:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 17:09:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-26 17:09:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 17:09:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 17:09:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:09:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 17:09:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:09:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:09:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Dinner
2025-07-26 17:09:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Dinner
2025-07-26 17:09:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: [{'x': 'served', 'y': 0}, {'x': 'pending', 'y': 2}]
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: [{'x': 'served', 'y': 0}, {'x': 'pending', 'y': 2}]
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-26 17:09:43 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic slh_mealpending_piechart_Dinner: [{'x': 'served', 'y': 0}, {'x': 'pending', 'y': 2}]
2025-07-26 17:09:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:09:51 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:09:51 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 tasks=2>]})
2025-07-26 17:09:51 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Dinner
2025-07-26 17:09:51 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffff8431f590 maxsize=100 tasks=2>]})
2025-07-26 17:09:51 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': []})
2025-07-26 17:09:51 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': []})
2025-07-26 17:34:34 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 17:34:34 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 17:34:34 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 17:34:34 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-26 17:34:35 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-26 17:34:35 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-26 17:34:35 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-26 17:34:35 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-26 17:36:08 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-26 17:36:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:36:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:36:08 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-26 17:36:22 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM analytics.meal_activity_fact
     with params: None and fetch type: all
2025-07-26 17:36:22 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:36:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:36:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:37:36 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:37:36 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Lunch
2025-07-26 17:37:36 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 17:38:07 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 12, room 101, meal type Lunch, timestamp None, rating None
2025-07-26 17:38:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '12', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-26 17:38:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 17:38:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:38:07 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:38:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:38:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-26 17:38:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 17:38:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:38:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 17:38:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:38:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:38:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 17:38:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:38:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:38:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb13f3d40 maxsize=100 _getters[1]>]})
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic slh_mealpending_piechart_Lunch: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:38:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb13f3d40 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Lunch
2025-07-26 17:38:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb13f3d40 maxsize=100 _getters[1] tasks=1>]})
2025-07-26 17:38:07 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Lunch
2025-07-26 17:38:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:38:30 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:38:30 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb13f3d40 maxsize=100 tasks=1>]})
2025-07-26 17:38:30 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Lunch
2025-07-26 17:38:30 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': [<Queue at 0xffffb13f3d40 maxsize=100 tasks=1>]})
2025-07-26 17:38:30 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:38:30 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Lunch': []})
2025-07-26 17:38:31 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:38:31 | DEBUG | /app/app/core/pubsub.py:34 - subscribe() | Subscribing to topic: slh_mealpending_piechart_Dinner
2025-07-26 17:38:31 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-26 17:38:39 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 12, room 101, meal type Lunch, timestamp None, rating None
2025-07-26 17:38:39 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '12', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-26 17:38:39 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 17:38:39 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:38:39 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:38:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-26 17:38:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-26 17:38:39 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 17:38:39 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:38:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 17:38:39 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:38:39 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:38:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 17:38:39 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:38:39 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:38:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffffb13f1880 maxsize=100 _getters[1]>]})
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Lunch
2025-07-26 17:38:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Lunch: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffffb13f1880 maxsize=100 _getters[1]>]})
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Lunch
2025-07-26 17:38:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: [{'x': 'served', 'y': 2}, {'x': 'pending', 'y': 0}]
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffffb13f1880 maxsize=100 _getters[1]>]})
2025-07-26 17:38:39 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-26 17:38:39 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:39:11 | INFO | /app/app/business/definitions/write.py:45 - add_new_mealactivity() | Adding new meal activity for tenant 12, room 101, meal type Dinner, timestamp None, rating None
2025-07-26 17:39:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': '12', 'room_number': 101, 'meal_type': 'Dinner'} and fetch type: none
2025-07-26 17:39:11 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-26 17:39:11 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 17:39:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 17:39:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-26 17:39:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-26 17:39:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 26)} and fetch type: all
2025-07-26 17:39:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:39:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-26 17:39:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:39:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:39:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-26 17:39:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-26 17:39:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-26 17:39:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:47 - task_3() | Task 3 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_3_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffffb13f1880 maxsize=100 _getters[1]>]})
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_3_Dinner
2025-07-26 17:39:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:41 - task_2() | Task 2 completed with result: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic task_2_Dinner: [{'id': '1', 'name': 'Test', 'email': 'Test@email.com', 'room_number': 101, 'kyc': False}, {'id': '2', 'name': 'Test2', 'email': 'Test2@email.com', 'room_number': 101, 'kyc': False}]
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffffb13f1880 maxsize=100 _getters[1]>]})
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic task_2_Dinner
2025-07-26 17:39:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: [{'x': 'served', 'y': 0}, {'x': 'pending', 'y': 2}]
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: [{'x': 'served', 'y': 0}, {'x': 'pending', 'y': 2}]
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffffb13f1880 maxsize=100 _getters[1]>]})
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 1 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-26 17:39:11 | DEBUG | /app/app/core/pubsub.py:40 - subscribe() | Received message on topic slh_mealpending_piechart_Dinner: [{'x': 'served', 'y': 0}, {'x': 'pending', 'y': 2}]
2025-07-26 17:39:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:55 - handle_trigger() | All tasks completed successfully
2025-07-26 17:39:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-26 17:39:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffffb13f1880 maxsize=100 tasks=1>]})
2025-07-26 17:39:24 | DEBUG | /app/app/core/pubsub.py:45 - subscribe() | Unsubscribing from topic: slh_mealpending_piechart_Dinner
2025-07-26 17:39:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': [<Queue at 0xffffb13f1880 maxsize=100 tasks=1>]})
2025-07-26 17:39:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': []})
2025-07-26 17:39:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {'slh_mealpending_piechart_Dinner': []})
2025-07-26 18:33:21 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-26 18:33:21 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-26 18:33:21 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-26 18:33:21 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-29 23:03:36 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-29 23:05:31 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-29 23:05:31 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-29 23:05:31 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-29 23:05:31 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-29 23:24:46 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-29 23:24:46 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-29 23:24:46 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-29 23:24:46 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-29 23:24:47 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-29 23:24:47 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-29 23:24:47 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-29 23:24:47 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-29 23:27:53 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-29 23:27:53 | DEBUG | /app/app/core/database.py:92 - run_ddl() | Running DDL query: CREATE SCHEMA IF NOT EXISTS "core";
2025-07-29 23:27:53 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-29 23:27:53 | DEBUG | /app/app/core/database.py:97 - run_ddl() | DDL query executed successfully
2025-07-29 23:27:53 | DEBUG | /app/app/core/database.py:92 - run_ddl() | Running DDL query: CREATE SCHEMA IF NOT EXISTS "mess";
2025-07-29 23:27:53 | DEBUG | /app/app/core/database.py:97 - run_ddl() | DDL query executed successfully
2025-07-29 23:27:53 | DEBUG | /app/app/core/database.py:92 - run_ddl() | Running DDL query: CREATE SCHEMA IF NOT EXISTS "laundry";
2025-07-29 23:27:53 | DEBUG | /app/app/core/database.py:97 - run_ddl() | DDL query executed successfully
2025-07-30 01:23:03 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 01:23:03 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 01:23:03 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 01:23:03 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 01:23:04 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 01:23:04 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 01:23:04 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 01:23:04 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 01:27:40 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-30 01:27:40 | DEBUG | /app/app/core/database.py:92 - run_ddl() | Running DDL query: CREATE TABLE IF NOT EXISTS "core"."pg" (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), name TEXT NOT NULL, email TEXT UNIQUE NOT NULL, password TEXT NOT NULL, phone_number TEXT, address TEXT, city TEXT, state TEXT, postal_code TEXT, created_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'Asia/Kolkata'));
2025-07-30 01:27:40 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-30 01:27:41 | DEBUG | /app/app/core/database.py:97 - run_ddl() | DDL query executed successfully
2025-07-30 01:34:27 | DEBUG | /app/app/core/database.py:92 - run_ddl() | Running DDL query: CREATE TABLE IF NOT EXISTS "core"."tenant" (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), pg_id UUID REFERENCES core.pg(id) ON DELETE CASCADE, password TEXT NOT NULL, name TEXT NOT NULL, email TEXT, phone_number TEXT, room_number INTEGER, join_date DATE DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'UTC' AT TIME ZONE 'Asia/Kolkata')::DATE, created_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'Asia/Kolkata'));
2025-07-30 01:34:27 | DEBUG | /app/app/core/database.py:97 - run_ddl() | DDL query executed successfully
2025-07-30 10:39:22 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 10:39:22 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 10:39:22 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 10:39:22 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 10:39:22 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 10:43:21 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 10:46:03 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 10:46:03 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 10:46:03 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 10:46:03 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 10:50:48 | INFO | /app/app/business/definitions/write.py:53 - add_new_pg() | Adding new pg data: {'name': 'Wander Vibez', 'email': 'wndervibez@gmail.com', 'password': 'wandervibez123', 'phone_number': '9726288097', 'address': 'Bodakdev', 'city': 'Ahmedabad', 'state': 'Gujarat', 'postal_code': '380054'}
2025-07-30 10:50:48 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-30 10:50:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO core.pg (name, email, password, phone_number, address, city, state, postal_code)
        VALUES (:name, :email, :password, :phone_number, :address, :city, :state, :postal_code)
        RETURNING id, name;
     with params: {'name': 'Wander Vibez', 'email': 'wndervibez@gmail.com', 'password': 'wandervibez123', 'phone_number': '9726288097', 'address': 'Bodakdev', 'city': 'Ahmedabad', 'state': 'Gujarat', 'postal_code': '380054'} and fetch type: one
2025-07-30 10:50:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 10:50:48 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-30 11:06:00 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:06:00 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:06:00 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:06:00 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:06:01 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:13:52 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:13:52 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:13:53 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:13:53 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:16:45 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:16:45 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:16:45 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:16:45 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:16:45 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:16:45 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:16:45 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:16:45 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:19:03 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:19:03 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:19:03 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:19:03 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:19:04 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:19:04 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:19:04 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:19:04 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:22:07 | ERROR | /app/app/graphql/db/mutation.py:34 - add_tenant() | 'requests'
2025-07-30 11:23:06 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:23:06 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:23:06 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:23:06 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:23:07 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:23:07 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:23:07 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:23:07 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:23:29 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: <starlette.requests.Request object at 0xffffa33da870>
2025-07-30 11:27:19 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:27:19 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:27:19 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:27:19 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:27:20 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:27:20 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:27:20 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:27:20 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:27:31 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: b'{"query":"# Welcome to GraphiQL\\n#\\n# GraphiQL is an in-browser tool for writing, validating, and\\n# testing GraphQL queries.\\n#\\n# Type queries into this side of the screen, and you will see intelligent\\n# typeaheads aware of the current GraphQL type schema and live syntax and\\n# validation errors highlighted within the text.\\n#\\n# GraphQL queries typically start with a \\"{\\" character. Lines that start\\n# with a # are ignored.\\n#\\n# An example GraphQL query might look like:\\n#\\n#     {\\n#       field(arg: \\"value\\") {\\n#         subField\\n#       }\\n#     }\\n#\\n# Keyboard shortcuts:\\n#\\n#   Prettify query:  Shift-Ctrl-P (or press the prettify button)\\n#\\n#  Merge fragments:  Shift-Ctrl-M (or press the merge button)\\n#\\n#        Run Query:  Ctrl-Enter (or press the play button)\\n#\\n#    Auto Complete:  Ctrl-Space (or just start typing)\\n#\\n\\nmutation ms {\\n  core: createSchema(schemaName: \\"core\\")\\n  mess: createSchema(schemaName: \\"mess\\")\\n  laundry: createSchema(schemaName: \\"laundry\\")\\n}\\n\\nmutation c {\\n  createTable(\\n    schemaName: \\"core\\"\\n    tableName: \\"pg\\"\\n    columns: [\\n      \\"id UUID PRIMARY KEY DEFAULT gen_random_uuid()\\",\\n      \\"name TEXT NOT NULL\\",\\n      \\"email TEXT UNIQUE NOT NULL\\",\\n      \\"password TEXT NOT NULL\\",\\n      \\"phone_number TEXT\\",\\n      \\"address TEXT\\",\\n      \\"city TEXT\\",\\n      \\"state TEXT\\",\\n      \\"postal_code TEXT\\",\\n      \\"created_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE \'Asia/Kolkata\')\\"\\n  \\t]\\n  )\\n}\\n\\nmutation c2 {\\n  createTable(\\n    schemaName: \\"core\\"\\n    tableName: \\"tenant\\"\\n    columns: [\\n      \\"id UUID PRIMARY KEY DEFAULT gen_random_uuid()\\",\\n      \\"pg_id UUID REFERENCES core.pg(id) ON DELETE CASCADE\\",\\n      \\"password TEXT NOT NULL\\",\\n      \\"name TEXT NOT NULL\\",\\n      \\"email TEXT\\",\\n      \\"phone_number TEXT\\",\\n      \\"room_number INTEGER\\",\\n      \\"join_date DATE DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE \'UTC\' AT TIME ZONE \'Asia/Kolkata\')::DATE\\",\\n      \\"created_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE \'Asia/Kolkata\')\\"\\n  \\t]\\n  )\\n}\\n\\nmutation pg {\\n  addPg(\\n    data: {\\n      name: \\"Wander Vibez\\"\\n      email: \\"wndervibez@gmail.com\\"\\n      phoneNumber: \\"9726288097\\"\\n      password: \\"wandervibez123\\"\\n      address: \\"Bodakdev\\"\\n      city: \\"Ahmedabad\\"\\n      state: \\"Gujarat\\"\\n      postalCode: \\"380054\\"\\n    }\\n  ){\\n    id\\n    name\\n  }\\n}\\n\\nmutation tenant {\\n  addTenant(\\n    data: {\\n      name: \\"Chinmay Pandya\\"\\n      email: \\"chinmaypandya@gmail.com\\"\\n      phoneNumber: \\"9726288097\\"\\n      password: \\"123\\"\\n      roomNumber: 509\\n    }\\n  )\\n}\\n\\n# {\\n#   getTenants {\\n#     id\\n#     name\\n#     roomNumber\\n#   }\\n# }\\n\\n# {\\n#   getMealactivity {\\n#     tenantId\\n#     roomNumber\\n#     timestamp\\n#     mealType\\n#   }\\n# }\\n\\n# subscription t1 {\\n#   pendingPiechart(\\n#     pgKey: \\"slh\\"\\n#     mealType: \\"Lunch\\"\\n#   ){\\n#     x\\n#     y\\n#   }\\n# }\\n# subscription t2 {\\n#   pendingPiechart(\\n#     pgKey: \\"slh\\"\\n#     mealType: \\"Dinner\\"\\n#   ){\\n#     x\\n#     y\\n#   }\\n# }\\n# subscription t2 {\\n#   task2Listener(mealType: \\"Dinner\\"){\\n#     message {\\n#       id\\n#       name\\n#       roomNumber\\n#     }\\n#   }\\n# }\\n# subscription t3 {\\n#   task3Listener(mealType: \\"Dinner\\"){\\n#     message {\\n#       id\\n#       name\\n#       roomNumber\\n#     }\\n#   }\\n# }","operationName":"tenant"}'
2025-07-30 11:28:58 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:28:58 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:28:58 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:28:58 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:28:59 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:28:59 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:28:59 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:28:59 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:29:16 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: ea813d9e-fef8-4a2d-855c-e9bac8501b19
2025-07-30 11:33:24 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:33:24 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:33:24 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:33:24 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:33:25 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:33:25 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:33:25 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:33:25 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:34:01 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: ea813d9e-fef8-4a2d-855c-e9bac8501b19
2025-07-30 11:34:01 | ERROR | /app/app/graphql/db/mutation.py:35 - add_tenant() | 'pd_id'
2025-07-30 11:35:50 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:35:50 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:35:50 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:35:50 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:35:51 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:35:51 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:35:51 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:35:51 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:36:02 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: ea813d9e-fef8-4a2d-855c-e9bac8501b19
2025-07-30 11:36:02 | ERROR | /app/app/graphql/db/mutation.py:35 - add_tenant() | 'pd_id'
2025-07-30 11:43:56 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:43:56 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:43:56 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:43:56 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:43:57 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:43:57 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:43:57 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:43:57 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:44:12 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: ea813d9e-fef8-4a2d-855c-e9bac8501b19
2025-07-30 11:44:12 | DEBUG | /app/app/core/utils.py:13 - get_sql_insert_query_params() | Generating SQL insert query for core.tenants with data: {'name': 'Chinmay Pandya', 'email': 'chinmaypandya@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'join_date': None, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'}
2025-07-30 11:44:12 | ERROR | /app/app/graphql/db/mutation.py:35 - add_tenant() | 'pd_id'
2025-07-30 11:46:31 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:46:31 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:46:31 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:46:31 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:46:32 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:46:32 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:46:32 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:46:32 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:46:42 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: ea813d9e-fef8-4a2d-855c-e9bac8501b19
2025-07-30 11:46:42 | DEBUG | /app/app/core/utils.py:13 - get_sql_insert_query_params() | Generating SQL insert query for core.tenants with data: {'name': 'Chinmay Pandya', 'email': 'chinmaypandya@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'join_date': None, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'}
2025-07-30 11:46:42 | DEBUG | /app/app/core/utils.py:25 - get_sql_insert_query_params() | Generated SQL query: 
        INSERT INTO core.tenants (name, email, password, phone_number, room_number, pg_id)
        VALUES (:name, :email, :password, :phone_number, :room_number, :pg_id)
        RETURNING id, pg_id, name;
     with params: {'name': 'Chinmay Pandya', 'email': 'chinmaypandya@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'}
2025-07-30 11:46:42 | ERROR | /app/app/graphql/db/mutation.py:35 - add_tenant() | 'pd_id'
2025-07-30 11:48:33 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:48:33 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:48:33 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:48:33 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:48:34 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:48:34 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:48:34 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:48:34 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:49:06 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: ea813d9e-fef8-4a2d-855c-e9bac8501b19
2025-07-30 11:49:06 | DEBUG | /app/app/core/utils.py:13 - get_sql_insert_query_params() | Generating SQL insert query for core.tenants with data: {'name': 'Chinmay Pandya', 'email': 'chinmaypandya@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'join_date': None, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'}
2025-07-30 11:49:06 | DEBUG | /app/app/core/utils.py:25 - get_sql_insert_query_params() | Generated SQL query: 
        INSERT INTO core.tenants (name, email, password, phone_number, room_number, pg_id)
        VALUES (:name, :email, :password, :phone_number, :room_number, :pg_id)
        RETURNING id, pg_id, name;
     with params: {'name': 'Chinmay Pandya', 'email': 'chinmaypandya@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'}
2025-07-30 11:49:06 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-30 11:49:06 | INFO | /app/app/business/definitions/write.py:38 - add_new_tenant() | Executing SQL query
2025-07-30 11:49:06 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO core.tenants (name, email, password, phone_number, room_number, pg_id)
        VALUES (:name, :email, :password, :phone_number, :room_number, :pg_id)
        RETURNING id, pg_id, name;
     with params: {'name': 'Chinmay Pandya', 'email': 'chinmaypandya@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'} and fetch type: one
2025-07-30 11:49:06 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 11:49:06 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-30 11:50:13 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:50:13 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:50:13 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:50:13 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:50:14 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:50:14 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:50:14 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:50:14 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:50:24 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: ea813d9e-fef8-4a2d-855c-e9bac8501b19
2025-07-30 11:50:24 | DEBUG | /app/app/core/utils.py:13 - get_sql_insert_query_params() | Generating SQL insert query for core.tenant with data: {'name': 'Chinmay Pandya', 'email': 'chinmaypandya@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'join_date': None, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'}
2025-07-30 11:50:24 | DEBUG | /app/app/core/utils.py:25 - get_sql_insert_query_params() | Generated SQL query: 
        INSERT INTO core.tenant (name, email, password, phone_number, room_number, pg_id)
        VALUES (:name, :email, :password, :phone_number, :room_number, :pg_id)
        RETURNING id, pg_id, name;
     with params: {'name': 'Chinmay Pandya', 'email': 'chinmaypandya@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'}
2025-07-30 11:50:24 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-30 11:50:24 | INFO | /app/app/business/definitions/write.py:38 - add_new_tenant() | Executing SQL query
2025-07-30 11:50:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO core.tenant (name, email, password, phone_number, room_number, pg_id)
        VALUES (:name, :email, :password, :phone_number, :room_number, :pg_id)
        RETURNING id, pg_id, name;
     with params: {'name': 'Chinmay Pandya', 'email': 'chinmaypandya@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'} and fetch type: one
2025-07-30 11:50:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 11:50:24 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-30 11:50:25 | DEBUG | /app/app/business/definitions/write.py:40 - add_new_tenant() | Query executed successfully, result: {'id': UUID('137ff834-3b15-4495-8536-1b181dccfe4c'), 'pg_id': UUID('ea813d9e-fef8-4a2d-855c-e9bac8501b19'), 'name': 'Chinmay Pandya'}
2025-07-30 11:53:04 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:53:04 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:53:04 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:53:04 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:53:04 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:53:04 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:53:04 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:53:04 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 11:53:51 | INFO | /app/app/graphql/db/mutation.py:30 - add_tenant() | Adding tenant to PG with ID: ea813d9e-fef8-4a2d-855c-e9bac8501b19
2025-07-30 11:53:51 | DEBUG | /app/app/core/utils.py:13 - get_sql_insert_query_params() | Generating SQL insert query for core.tenant with data: {'name': 'Nitya Balar', 'email': 'nityabalar@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'join_date': None, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'}
2025-07-30 11:53:51 | DEBUG | /app/app/core/utils.py:25 - get_sql_insert_query_params() | Generated SQL query: 
        INSERT INTO core.tenant (name, email, password, phone_number, room_number, pg_id)
        VALUES (:name, :email, :password, :phone_number, :room_number, :pg_id)
        RETURNING id, pg_id, name;
     with params: {'name': 'Nitya Balar', 'email': 'nityabalar@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'}
2025-07-30 11:53:51 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-30 11:53:51 | INFO | /app/app/business/definitions/write.py:38 - add_new_tenant() | Executing SQL query
2025-07-30 11:53:51 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO core.tenant (name, email, password, phone_number, room_number, pg_id)
        VALUES (:name, :email, :password, :phone_number, :room_number, :pg_id)
        RETURNING id, pg_id, name;
     with params: {'name': 'Nitya Balar', 'email': 'nityabalar@gmail.com', 'password': '123', 'phone_number': '9726288097', 'room_number': 509, 'pg_id': 'ea813d9e-fef8-4a2d-855c-e9bac8501b19'} and fetch type: one
2025-07-30 11:53:51 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 11:53:51 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-30 11:53:51 | DEBUG | /app/app/business/definitions/write.py:40 - add_new_tenant() | Query executed successfully, result: {'id': UUID('bc02a8f6-d6aa-4ac0-81ca-71f51e821288'), 'pg_id': UUID('ea813d9e-fef8-4a2d-855c-e9bac8501b19'), 'name': 'Nitya Balar'}
2025-07-30 11:58:52 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 11:58:52 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 11:58:52 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 11:58:52 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 11:58:53 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 11:58:53 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 11:58:53 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 11:58:53 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 12:01:12 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-30 12:01:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM core.tenant
     with params: None and fetch type: all
2025-07-30 12:01:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 12:01:12 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
2025-07-30 12:02:54 | DEBUG | /app/app/core/trigger_queue.py:48 - stop() | Stopping SingleWorkerTriggerQueue worker
2025-07-30 12:02:54 | DEBUG | /app/app/core/trigger_queue.py:51 - stop() | Cancelling worker task
2025-07-30 12:02:54 | ERROR | /app/app/core/trigger_queue.py:71 - _run() | TriggerQueue worker cancelled
2025-07-30 12:02:54 | INFO | /app/app/graphql/analytics/aggregator.py:73 - lifespan() | Trigger queue stopped
2025-07-30 12:02:55 | DEBUG | /app/app/core/trigger_queue.py:11 - __init__() | Initializing TriggerQueue
2025-07-30 12:02:55 | DEBUG | /app/app/core/trigger_queue.py:41 - start() | Starting SingleWorkerTriggerQueue worker
2025-07-30 12:02:55 | DEBUG | /app/app/core/trigger_queue.py:44 - start() | Creating new worker task
2025-07-30 12:02:55 | INFO | /app/app/graphql/analytics/aggregator.py:67 - lifespan() | Trigger queue started
2025-07-30 12:03:06 | DEBUG | /app/app/core/database.py:13 - __init__() | Initializing DBManager with URL: postgresql+asyncpg://batlahouse:wandervibez@db:5432/smartpg
2025-07-30 12:03:06 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM core.tenant
     with params: None and fetch type: all
2025-07-30 12:03:06 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 12:03:06 | DEBUG | /app/app/core/database.py:20 - engine() | Creating new AsyncEngine instance
