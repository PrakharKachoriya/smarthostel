2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:28:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:28:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:28:48 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:28:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:28:48 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:48 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:48 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:55 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:55 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:55 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:28:55 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:55 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:55 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:56 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:56 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:57 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:57 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:28:59 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:28:59 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:00 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:00 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:01 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:01 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:01 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:01 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:01 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:01 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:01 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:01 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:01 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:01 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:01 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:01 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:01 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:01 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:01 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:07 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:07 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:07 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:07 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:08 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:08 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:08 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:17 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:17 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:18 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:18 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:18 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:24 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:24 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:25 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:25 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:25 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:25 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:25 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:25 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:25 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:25 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:26 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:26 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:26 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:35 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:35 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:35 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:35 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:35 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:35 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:35 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:35 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:35 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:35 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:35 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:35 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:35 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:36 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:36 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:36 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:36 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:36 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:36 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:36 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:36 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:36 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:36 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:36 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:37 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:37 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:48 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:48 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:48 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:48 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:48 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:48 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:48 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:48 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:49 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:49 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:49 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:49 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:50 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:50 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:50 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:50 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:50 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:50 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:50 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:50 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:50 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-2, room 102, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-2', 'room_number': 102, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-8, room 108, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-8', 'room_number': 108, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-6, room 106, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-6', 'room_number': 106, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-1, room 101, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-1', 'room_number': 101, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-10, room 110, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-10', 'room_number': 110, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-7, room 107, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-7', 'room_number': 107, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-5, room 105, meal type Dinner, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-5', 'room_number': 105, 'meal_type': 'Dinner'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-9, room 109, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-9', 'room_number': 109, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-4, room 104, meal type Lunch, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-4', 'room_number': 104, 'meal_type': 'Lunch'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | INFO | /app/app/business/definitions/write.py:52 - add_new_mealactivity() | Adding new meal activity for tenant tenant-3, room 103, meal type Breakfast, timestamp None, rating None
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        INSERT INTO analytics.meal_activity_fact (tenant_id, room_number, meal_type, timestamp, rating) VALUES (
            :tenant_id, :room_number, :meal_type, CURRENT_TIMESTAMP, NULL
        )
     with params: {'tenant_id': 'tenant-3', 'room_number': 103, 'meal_type': 'Breakfast'} and fetch type: none
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:56 - execute() | Running query in a transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:21 - enqueue() | Enqueuing payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:58 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:58 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:58 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:58 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:58 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:59 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:59 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:59 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:59 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:59 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:59 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:29:59 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:59 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:29:59 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:29:59 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:29:59 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:29:59 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:29:59 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:05 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:05 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:05 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:05 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:05 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:05 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:05 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:05 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:05 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:05 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:05 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:05 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:05 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:05 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:05 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:05 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:11 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:11 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:11 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:11 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:11 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:12 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:12 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:12 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:12 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:34 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:34 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:34 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:34 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:34 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:34 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:34 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:34 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:34 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:34 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:34 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:34 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:34 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:34 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:34 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:34 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:34 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:42 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:42 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:42 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:42 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:42 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:42 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:42 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:42 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:42 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:42 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:43 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:43 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:43 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:43 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:43 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:52 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:52 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:52 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:52 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:52 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:30:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:30:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:30:53 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:30:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:30:53 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:14 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:14 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:14 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:14 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:14 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:23 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:23 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:23 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:23 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:23 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:24 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:24 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:24 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:24 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:33 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:33 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:33 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:33 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:33 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:44 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:44 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:44 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:44 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:45 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:45 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:45 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:45 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:45 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:53 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:53 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:53 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:53 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:31:54 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:31:54 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:31:54 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:31:54 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:31:54 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:03 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:03 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:03 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:03 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:03 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:04 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:04 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:04 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:04 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:04 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:13 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:13 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:13 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:13 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:13 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:13 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:13 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:13 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:13 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:13 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:19 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:19 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:19 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:19 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:19 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:27 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:27 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:27 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:27 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:37 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:37 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:37 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:37 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:38 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:38 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:38 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:38 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:38 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:38 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:38 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:38 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:38 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:38 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:38 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:38 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:38 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:46 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:46 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:46 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:46 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:46 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:46 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:46 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:46 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:46 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:46 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:46 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:47 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:47 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:47 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:47 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:47 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:56 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:56 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:56 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:56 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:56 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:32:57 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:32:57 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:32:57 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:32:57 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:32:57 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:08 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:08 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:08 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:08 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:08 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:09 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:09 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:09 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:09 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:09 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:10 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:10 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:10 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:10 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:10 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:17 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:17 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:17 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:17 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:17 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Dinner: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Lunch: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (2 sub-exceptions)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Dinner'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Dinner
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Dinner', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Lunch'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Lunch
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Lunch', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
2025-07-30 14:33:18 | DEBUG | /app/app/core/trigger_queue.py:66 - _run() | Processing task: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:18 - handle_trigger() | Handling trigger payload: {'action': 'meal_activity_added', 'pg_key': 'slh', 'meal_type': 'Breakfast'}
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:22 - task_1() | Task started for slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        WITH tenants AS (
            SELECT id AS tenant_id
            FROM master.tenants_dim
        )
        
        , meal_activity AS (
            SELECT tenant_id
            FROM analytics.meal_activity_fact
            WHERE meal_type = :meal_type AND timestamp::date = :date
        )
        
        , combined AS (
            SELECT
                t.tenant_id
                , m.tenant_id AS meal_tenant_id
                , (
                    CASE
                    WHEN m.tenant_id IS NULL
                        THEN 'pending'
                    ELSE 'served'
                    END
                ) AS status
            FROM tenants t
            LEFT JOIN meal_activity m
            ON t.tenant_id = m.tenant_id
        )
        
        , status_counts AS (
            SELECT
                status,
                COUNT(*) AS value_counts
            FROM combined
            GROUP BY status
        )
        
        SELECT
            s.status AS status,
            COALESCE(sc.value_counts, 0) AS value_counts
        FROM (VALUES ('served'), ('pending')) AS s(status)
        LEFT JOIN status_counts sc ON (
            sc.status = s.status
        )
     with params: {'meal_type': 'Breakfast', 'date': datetime.date(2025, 7, 30)} and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:39 - task_2() | Task 2 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:45 - task_3() | Task 3 started
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:52 - execute() | Executing SQL query: 
        SELECT *
        FROM master.tenants_dim
     with params: None and fetch type: all
2025-07-30 14:33:18 | DEBUG | /app/app/core/database.py:60 - execute() | Running query in a non-transactional context
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:30 - task_1() | Error fetching meal pending data: 'NoneType' object is not subscriptable
2025-07-30 14:33:18 | DEBUG | /app/app/graphql/analytics/aggregator.py:32 - task_1() | Task meal pending pie chart completed with result: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:26 - lock() | Acquiring lock for PubSub operations
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:54 - publish() | Publishing message to topic slh_mealpending_piechart_Breakfast: []
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:20 - subscribers() | Current subscribers: defaultdict(<class 'list'>, {})
2025-07-30 14:33:18 | DEBUG | /app/app/core/pubsub.py:64 - publish() | Message published to 0 subscribers on topic slh_mealpending_piechart_Breakfast
2025-07-30 14:33:18 | ERROR | /app/app/graphql/analytics/aggregator.py:59 - handle_trigger() | Error handling trigger payload: unhandled errors in a TaskGroup (1 sub-exception)
